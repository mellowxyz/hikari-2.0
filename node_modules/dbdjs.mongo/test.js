const assert = require('assert')
const mongoose = require('mongoose')
const db = require('./src/index').default

const first = {
    key: 'a',
    data: {
        key: 'a',
        value: 1
    }
}

const second = {
    key: 'b',
    data: {
        key: 'b',
        value: 2
    }
}

describe('Connect', function() {
    it('Should connect to mongodb', async function() {
        assert.deepStrictEqual(await mongoose.connect('mongodb://localhost:27017/dbdjs-mongo', {
            useNewUrlParser: true,
            useUnifiedTopology: true,
            useFindAndModify: false,
            keepAlive: true
        }), mongoose)
    })
})

describe('Instance', function() {
    describe('#setInstance', function() {
        it('Should set the mongoInstance for the instance', function() {
            assert.strictEqual(db.setInstance(mongoose), undefined)
        })
    })

    describe('#createModel', function() {
        it('Should create a new model for the instance', function() {
            assert.strictEqual(db.createModel('test'), undefined)
        })
    })

    describe('#getModel', function() {
        it('Should get the model created from the instance', function() {
            assert.notDeepStrictEqual(db.getModel('test'), undefined)
        })
    })

    describe('#deleteModel', function() {
        it('Should delete the model created from the instance', function() {
            assert.strictEqual(db.deleteModel('test'), undefined)
        })
    })

    describe('#set', async function() {
        it('Should set a new data with key a', async function() {
            if (!db.getModel('main')) db.createModel('main')

            assert.strictEqual(await db.set('main', first.key, first.data.value), true)
        })

        it('Should set a new data with key b', async function() {
            if (!db.getModel('main')) db.createModel('main')

            assert.strictEqual(await db.set('main', second.key, second.data.value), true)
        })
    })

    describe('#get', async function() {
        it('Should get the data with key a', async function() {
            if (!db.getModel('main')) db.createModel('main')

            assert.deepStrictEqual(await db.get('main', first.key), first.data)
        })

        it('Should get the data with key b', async function() {
            if (!db.getModel('main')) db.createModel('main')

            assert.deepStrictEqual(await db.get('main', second.key), second.data)
        })
    })

    describe('#all', async function() {
        it('Should get all data', async function() {
            if (!db.getModel('main')) db.createModel('main')

            assert.deepStrictEqual(await db.all('main', { filter: x => typeof x.data.value === 'number' }), [ first, second ])
        })
    })

    describe('#delete', async function() {
        it('Should delete the data with key a', async function() {
            if (!db.getModel('main')) db.createModel('main')

            assert.strictEqual(await db.delete('main', first.key), true)
        })

        it('Should delete the data with key b', async function() {
            if (!db.getModel('main')) db.createModel('main')

            assert.strictEqual(await db.delete('main', second.key), true)
        })
    })
})